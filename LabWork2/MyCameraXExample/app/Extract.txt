private fun createSpannable1(detectedText: String, context: Context): SpannableString {
    val spannable = SpannableString(detectedText)
    val mathExpressions = findMathExpressions(detectedText)

    mathExpressions.forEach { expression ->
        val start = detectedText.indexOf(expression)
        if (start != -1) {
            spannable.setSpan(
                object : ClickableSpan() {
                    override fun onClick(widget: View) {

                        val intent = Intent(context, CalcActivity::class.java).apply {
                            putExtra("EXPRESSION", expression)
                        }
                        context.startActivity(intent)
                    }

                    override fun updateDrawState(ds: TextPaint) {
                        super.updateDrawState(ds)
                        ds.isUnderlineText = false
                        ds.color = Color.BLUE
                    }
                },
                start,
                start + expression.length,
                Spanned.SPAN_EXCLUSIVE_EXCLUSIVE
            )
        }
    }

    return spannable
}
private fun findMathExpressions(text: String): List<String> {
    val regex = Regex("""\b\d+[\+\-\*\/]\d+\b""")
    return regex.findAll(text).map { it.value }.toList()
}